.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = = "table"),
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = = "table"),
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = "table"),
DT::dataTableOutput(id = "selected_table"), # Add the DataTable for the selected rows
actionButton(id = "checkout", label = "Checkout") # Add the checkout button
)
)
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = "table"),
DT::dataTableOutput(id = "selected_table"), # Add the DataTable for the selected rows
actionButton(id = "checkout", label = "Checkout") # Add the checkout button
)
)
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = "table"),
DT::dataTableOutput(outputId = "selected_table"), # Add the DataTable for the selected rows
actionButton(id = "checkout", label = "Checkout") # Add the checkout button
)
)
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = "table"),
DT::dataTableOutput(outputId = "selected_table"), # Add the DataTable for the selected rows
actionButton(id = "checkout", label = "Checkout") # Add the checkout button
)
)
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = "table"),
DT::dataTableOutput(outputId = "selected_table"), # Add the DataTable for the selected rows
actionButton(id = "checkout", label = "Checkout") # Add the checkout button
)
)
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = "table"),
DT::dataTableOutput(outputId = "selected_table"), # Add the DataTable for the selected rows
actionButton(id = "checkout", label = "Checkout") # Add the checkout button
)
)
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = "table"),
DT::dataTableOutput(outputId = "selected_table"), # Add the DataTable for the selected rows
actionButton(id = "checkout", label = "Checkout") # Add the checkout button
)
)
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = "table"),
DT::dataTableOutput(outputId = "selected_table"), # Add the DataTable for the selected rows
actionButton(id = "checkout", label = "Checkout") # Add the checkout button
)
)
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = "table"),
DT::dataTableOutput(outputId = "selected_table"), # Add the DataTable for the selected rows
actionButton(id = "checkout", label = "Checkout") # Add the checkout button
)
)
# Load the necessary packages
library(shiny)
library(shinythemes)
library(readxl)
library(DT)
library(shinyWidgets)
library(shinyjs)
library(shinydashboard)
# Define the UI
ui <- dashboardPage(
skin = "blue",
dashboardHeader(title = "Data Catalog"),
dashboardSidebar(disable = TRUE), # Disable the sidebar
dashboardBody(
useShinyjs(), # Enable shinyjs
tags$head(tags$style(HTML("
.shiny-input-checkbox-group .shiny-input-container {
border-radius: 5px;  # Add rounded corners
}
#logo {
display: block;
margin: auto;
}
"))),
# tags$img(id = "logo", src = "www/logo.png", height = 100, width = 200), # Add a logo
div(
dropdownButton(
shiny::checkboxGroupInput(inputId = "studies", label = NULL, choices = c("EEG", "Lyme", "ALZ", "MDD/AUD"), selected = c("EEG", "Lyme", "ALZ", "MDD/AUD")),
label = "Select Studies",
status = "primary",
circle = "false"
)
),
DT::dataTableOutput(outputId = "table"),
DT::dataTableOutput(outputId = "selected_table"), # Add the DataTable for the selected rows
actionButton(inputId = "checkout", label = "Checkout")
)
)
# Define the server function
server <- function(input, output, session) {
# Load the data
data <- read_excel("dataharmSAM.xlsx") # this would ideally be the database connection/ call
# Create a reactive data frame that filters the data based on the selected studies
filtered_by_study <- reactive({
if (is.null(input$studies)) {
return(data.frame())
} else {
return(data[apply(data[input$studies], 1, function(x) any(x == "X")), ]) # Filter the data based on the selected studies
}
})
# Create a reactive value to store the selected rows
selected_rows <- reactiveVal(data.frame())
output$table <- renderDT({
# Get the column indices from their names
prefix_index <- which(names(data) == "Prefix") - 1 # Subtract 1 to convert to 0-based index
urls_index <- which(names(data) == "URLs") - 1
# Get the column indices of the unchecked studies
unchecked_studies_indices <- which(!names(data) %in% c("Prefix", "URLs", "Number of Items", "Subscales", input$studies)) - 1
datatable(filtered_by_study(), # Render the filtered data
extensions = "Buttons", # Add the buttons extension
options = list(
dom = "Bfrtip", # Add the buttons to the top of the table, these buttons are: copy, csv, excel, pdf, print
buttons = list("colvis"), # Add the column visibility button
columnDefs = list(
list(visible = FALSE, targets = c(urls_index, unchecked_studies_indices)) # Hide the URLs column and the columns of the unchecked studies
),
rowCallback = JS( # Add the checkboxes to the first column
paste0("function(row, data) {
var $checkbox = $('<input type=\"checkbox\" class=\"measure-checkbox\" value=\"' + data[", prefix_index, "] + '\"> ' + data[", prefix_index, "] + '</a>');
$('td:eq(", prefix_index, ")', row).html($checkbox);
}")
),
pageLength = 10, # Set the initial number of rows to 10
scrollY = "400px", # Increase the height of the scrollable area
scrollCollapse = TRUE, # Adjust the table height to fit the number of rows
paging = FALSE # Disable pagination
),
# Add the JavaScript callback to update the selected rows
callback = JS("
table.on('change', '.measure-checkbox', function() {
console.log('Checkbox changed');
Shiny.setInputValue('measure_checkbox', $('.measure-checkbox:checked').map(function() { return $(this).val(); }).get());
});
"),
rownames = FALSE
)
})
observeEvent(input$measure_checkbox, {
# Remove the c() function and quotes from the string
measure_checkbox_string <- gsub("c\\(|\\)|\"", "", input$measure_checkbox)
# Split the string into a vector of strings
measure_checkbox_values <- unlist(strsplit(measure_checkbox_string, ","))
# Remove leading and trailing white spaces from each value
measure_checkbox_values <- trimws(measure_checkbox_values)
# Convert the tibble to a vector
prefix_vector <- unlist(filtered_by_study()[, "Prefix"])
print(measure_checkbox_values)
print(prefix_vector)
print(measure_checkbox_values %in% prefix_vector)
# Get the indices of the rows where the Prefix is in measure_checkbox_values
selected_rows_indices <- which(prefix_vector %in% measure_checkbox_values)
# Subset the rows using the indices
selected_rows_temp <- filtered_by_study()[selected_rows_indices, ]
# Update the reactive value
selected_rows(selected_rows_temp)
print(selected_rows)
})
# Render the selected table
output$selected_table <- DT::renderDataTable(
{
req(selected_rows()) # Ensure that selected_rows() is available
selected_rows()
},
server = FALSE
) # Use client-side processing
}
# Run the app
shinyApp(ui, server)
